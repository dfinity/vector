name: Test Suite

on:
  pull_request:
  merge_group:
    types: [checks_requested]

concurrency:
  # `github.event.number` exists for pull requests, otherwise fall back to SHA for merge queue
  group: ${{ github.workflow }}-${{ github.event.number || github.event.merge_group.head_sha }}
  cancel-in-progress: true

env:
  AWS_ACCESS_KEY_ID: "dummy"
  AWS_SECRET_ACCESS_KEY: "dummy"
  CONTAINER_TOOL: "docker"
  DD_ENV: "ci"
  DD_API_KEY: ${{ secrets.DD_API_KEY }}
  RUST_BACKTRACE: full
  TEST_LOG: vector=debug
  VERBOSE: true
  CI: true
  PROFILE: debug
  # observing issues fetching boringssl via HTTPS in the OSX build, seeing if this helps
  # can be removed when we switch back to the upstream openssl-sys crate
  CARGO_NET_GIT_FETCH_WITH_CLI: true

jobs:
  changes:
    uses: ./.github/workflows/changes.yml
    secrets: inherit
    with:
      base_ref: ${{ github.event.merge_group.base_ref || github.event.pull_request.base.ref }}
      head_ref: ${{ github.event.merge_group.head_ref || github.event.pull_request.head.ref }}

  checks:
    name: Checks
    runs-on: ubuntu-latest
    needs: changes
    env:
      CARGO_INCREMENTAL: 0
    steps:
      - uses: actions/checkout@v3
        with:
          # check-version needs tags
          fetch-depth: 0 # fetch everything

      - uses: actions/cache@v3
        name: Cache Cargo registry + index
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh

      - uses: ruby/setup-ruby@v1

      - run: bash scripts/environment/prepare.sh

      - name: Enable Rust matcher
        run: echo "::add-matcher::.github/matchers/rust.json"

      - name: Check code format
        run: make check-fmt

      - name: Check clippy
        if: needs.changes.outputs.source == 'true'
        run: make check-clippy

  # This is a required status check, so it always needs to run if prior jobs failed, in order to mark the status correctly.
  all-checks:
    name: Test Suite
    runs-on: ubuntu-20.04
    if: always()
    needs: [changes, checks]
    env:
      FAILED: ${{ contains(needs.*.result, 'failure') }}
    steps:
      - run: |
          echo "failed=${{ env.FAILED }}"
          if [[ "$FAILED" == "true" ]] ; then
            exit 1
          else
            exit 0
          fi

